package ru.hyst329.helengine

import java.nio.{ByteBuffer, ByteOrder}
import java.security.SecureRandom

import ru.hyst329.helengine.Global._

import scala.annotation.tailrec
import scala.io.Source

object MagicBitBoards {
  val KingPatterns: Array[BitBoard] = Array(
    0X0000000000000302L, 0X0000000000000705L, 0X0000000000000E0AL, 0X0000000000001C14L,
    0X0000000000003828L, 0X0000000000007050L, 0X000000000000E0A0L, 0X000000000000C040L,
    0X0000000000030203L, 0X0000000000070507L, 0X00000000000E0A0EL, 0X00000000001C141CL,
    0X0000000000382838L, 0X0000000000705070L, 0X0000000000E0A0E0L, 0X0000000000C040C0L,
    0X0000000003020300L, 0X0000000007050700L, 0X000000000E0A0E00L, 0X000000001C141C00L,
    0X0000000038283800L, 0X0000000070507000L, 0X00000000E0A0E000L, 0X00000000C040C000L,
    0X0000000302030000L, 0X0000000705070000L, 0X0000000E0A0E0000L, 0X0000001C141C0000L,
    0X0000003828380000L, 0X0000007050700000L, 0X000000E0A0E00000L, 0X000000C040C00000L,
    0X0000030203000000L, 0X0000070507000000L, 0X00000E0A0E000000L, 0X00001C141C000000L,
    0X0000382838000000L, 0X0000705070000000L, 0X0000E0A0E0000000L, 0X0000C040C0000000L,
    0X0003020300000000L, 0X0007050700000000L, 0X000E0A0E00000000L, 0X001C141C00000000L,
    0X0038283800000000L, 0X0070507000000000L, 0X00E0A0E000000000L, 0X00C040C000000000L,
    0X0302030000000000L, 0X0705070000000000L, 0X0E0A0E0000000000L, 0X1C141C0000000000L,
    0X3828380000000000L, 0X7050700000000000L, 0XE0A0E00000000000L, 0XC040C00000000000L,
    0X0203000000000000L, 0X0507000000000000L, 0X0A0E000000000000L, 0X141C000000000000L,
    0X2838000000000000L, 0X5070000000000000L, 0XA0E0000000000000L, 0X40C0000000000000L
  )

  val KnightPatterns: Array[BitBoard] = Array(
    0X0000000000020400L, 0X0000000000050800L, 0X00000000000A1100L, 0X0000000000142200L,
    0X0000000000284400L, 0X0000000000508800L, 0X0000000000A01000L, 0X0000000000402000L,
    0X0000000002040004L, 0X0000000005080008L, 0X000000000A110011L, 0X0000000014220022L,
    0X0000000028440044L, 0X0000000050880088L, 0X00000000A0100010L, 0X0000000040200020L,
    0X0000000204000402L, 0X0000000508000805L, 0X0000000A1100110AL, 0X0000001422002214L,
    0X0000002844004428L, 0X0000005088008850L, 0X000000A0100010A0L, 0X0000004020002040L,
    0X0000020400040200L, 0X0000050800080500L, 0X00000A1100110A00L, 0X0000142200221400L,
    0X0000284400442800L, 0X0000508800885000L, 0X0000A0100010A000L, 0X0000402000204000L,
    0X0002040004020000L, 0X0005080008050000L, 0X000A1100110A0000L, 0X0014220022140000L,
    0X0028440044280000L, 0X0050880088500000L, 0X00A0100010A00000L, 0X0040200020400000L,
    0X0204000402000000L, 0X0508000805000000L, 0X0A1100110A000000L, 0X1422002214000000L,
    0X2844004428000000L, 0X5088008850000000L, 0XA0100010A0000000L, 0X4020002040000000L,
    0X0400040200000000L, 0X0800080500000000L, 0X1100110A00000000L, 0X2200221400000000L,
    0X4400442800000000L, 0X8800885000000000L, 0X100010A000000000L, 0X2000204000000000L,
    0X0004020000000000L, 0X0008050000000000L, 0X00110A0000000000L, 0X0022140000000000L,
    0X0044280000000000L, 0X0088500000000000L, 0X0010A00000000000L, 0X0020400000000000L
  )

  val WhitePawnMovePatterns: Array[BitBoard] = Array(
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L,
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L,
    0X0000000001010000L, 0X0000000002020000L, 0X0000000004040000L, 0X0000000008080000L,
    0X0000000010100000L, 0X0000000020200000L, 0X0000000040400000L, 0X0000000080800000L,
    0X0000000001000000L, 0X0000000002000000L, 0X0000000004000000L, 0X0000000008000000L,
    0X0000000010000000L, 0X0000000020000000L, 0X0000000040000000L, 0X0000000080000000L,
    0X0000000100000000L, 0X0000000200000000L, 0X0000000400000000L, 0X0000000800000000L,
    0X0000001000000000L, 0X0000002000000000L, 0X0000004000000000L, 0X0000008000000000L,
    0X0000010000000000L, 0X0000020000000000L, 0X0000040000000000L, 0X0000080000000000L,
    0X0000100000000000L, 0X0000200000000000L, 0X0000400000000000L, 0X0000800000000000L,
    0X0001000000000000L, 0X0002000000000000L, 0X0004000000000000L, 0X0008000000000000L,
    0X0010000000000000L, 0X0020000000000000L, 0X0040000000000000L, 0X0080000000000000L,
    0X0100000000000000L, 0X0200000000000000L, 0X0400000000000000L, 0X0800000000000000L,
    0X1000000000000000L, 0X2000000000000000L, 0X4000000000000000L, 0X8000000000000000L,
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L,
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L
  )

  val BlackPawnMovePatterns: Array[BitBoard] = Array(
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L,
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L,
    0X0000000000000001L, 0X0000000000000002L, 0X0000000000000004L, 0X0000000000000008L,
    0X0000000000000010L, 0X0000000000000020L, 0X0000000000000040L, 0X0000000000000080L,
    0X0000000000000100L, 0X0000000000000200L, 0X0000000000000400L, 0X0000000000000800L,
    0X0000000000001000L, 0X0000000000002000L, 0X0000000000004000L, 0X0000000000008000L,
    0X0000000000010000L, 0X0000000000020000L, 0X0000000000040000L, 0X0000000000080000L,
    0X0000000000100000L, 0X0000000000200000L, 0X0000000000400000L, 0X0000000000800000L,
    0X0000000001000000L, 0X0000000002000000L, 0X0000000004000000L, 0X0000000008000000L,
    0X0000000010000000L, 0X0000000020000000L, 0X0000000040000000L, 0X0000000080000000L,
    0X0000000100000000L, 0X0000000200000000L, 0X0000000400000000L, 0X0000000800000000L,
    0X0000001000000000L, 0X0000002000000000L, 0X0000004000000000L, 0X0000008000000000L,
    0X0000010100000000L, 0X0000020200000000L, 0X0000040400000000L, 0X0000080800000000L,
    0X0000101000000000L, 0X0000202000000000L, 0X0000404000000000L, 0X0000808000000000L,
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L,
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L
  )

  val WhitePawnCapturePatterns: Array[BitBoard] = Array(
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L,
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L,
    0X0000000000020000L, 0X0000000000040000L, 0X0000000000080000L, 0X0000000000100000L,
    0X0000000000200000L, 0X0000000000400000L, 0X0000000000800000L, 0X0000000000000000L,
    0X0000000002000000L, 0X0000000004000000L, 0X0000000008000000L, 0X0000000010000000L,
    0X0000000020000000L, 0X0000000040000000L, 0X0000000080000000L, 0X0000000000000000L,
    0X0000000200000000L, 0X0000000400000000L, 0X0000000800000000L, 0X0000001000000000L,
    0X0000002000000000L, 0X0000004000000000L, 0X0000008000000000L, 0X0000000000000000L,
    0X0000020000000000L, 0X0000040000000000L, 0X0000080000000000L, 0X0000100000000000L,
    0X0000200000000000L, 0X0000400000000000L, 0X0000800000000000L, 0X0000000000000000L,
    0X0002000000000000L, 0X0004000000000000L, 0X0008000000000000L, 0X0010000000000000L,
    0X0020000000000000L, 0X0040000000000000L, 0X0080000000000000L, 0X0000000000000000L,
    0X0200000000000000L, 0X0400000000000000L, 0X0800000000000000L, 0X1000000000000000L,
    0X2000000000000000L, 0X4000000000000000L, 0X8000000000000000L, 0X0000000000000000L,
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L,
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L
  )

  val BlackPawnCapturePatterns: Array[BitBoard] = Array(
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L,
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L,
    0X0000000000000002L, 0X0000000000000004L, 0X0000000000000008L, 0X0000000000000010L,
    0X0000000000000020L, 0X0000000000000040L, 0X0000000000000080L, 0X0000000000000000L,
    0X0000000000000200L, 0X0000000000000400L, 0X0000000000000800L, 0X0000000000001000L,
    0X0000000000002000L, 0X0000000000004000L, 0X0000000000008000L, 0X0000000000000000L,
    0X0000000000020000L, 0X0000000000040000L, 0X0000000000080000L, 0X0000000000100000L,
    0X0000000000200000L, 0X0000000000400000L, 0X0000000000800000L, 0X0000000000000000L,
    0X0000000002000000L, 0X0000000004000000L, 0X0000000008000000L, 0X0000000010000000L,
    0X0000000020000000L, 0X0000000040000000L, 0X0000000080000000L, 0X0000000000000000L,
    0X0000000200000000L, 0X0000000400000000L, 0X0000000800000000L, 0X0000001000000000L,
    0X0000002000000000L, 0X0000004000000000L, 0X0000008000000000L, 0X0000000000000000L,
    0X0000020000000000L, 0X0000040000000000L, 0X0000080000000000L, 0X0000100000000000L,
    0X0000200000000000L, 0X0000400000000000L, 0X0000800000000000L, 0X0000000000000000L,
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L,
    0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L, 0X0000000000000000L
  )

  val RookMasks: Array[BitBoard] = Array(
    0X000101010101017EL, 0X000202020202027CL, 0X000404040404047AL, 0X0008080808080876L,
    0X001010101010106EL, 0X002020202020205EL, 0X004040404040403EL, 0X008080808080807EL,
    0X0001010101017E00L, 0X0002020202027C00L, 0X0004040404047A00L, 0X0008080808087600L,
    0X0010101010106E00L, 0X0020202020205E00L, 0X0040404040403E00L, 0X0080808080807E00L,
    0X00010101017E0100L, 0X00020202027C0200L, 0X00040404047A0400L, 0X0008080808760800L,
    0X00101010106E1000L, 0X00202020205E2000L, 0X00404040403E4000L, 0X00808080807E8000L,
    0X000101017E010100L, 0X000202027C020200L, 0X000404047A040400L, 0X0008080876080800L,
    0X001010106E101000L, 0X002020205E202000L, 0X004040403E404000L, 0X008080807E808000L,
    0X0001017E01010100L, 0X0002027C02020200L, 0X0004047A04040400L, 0X0008087608080800L,
    0X0010106E10101000L, 0X0020205E20202000L, 0X0040403E40404000L, 0X0080807E80808000L,
    0X00017E0101010100L, 0X00027C0202020200L, 0X00047A0404040400L, 0X0008760808080800L,
    0X00106E1010101000L, 0X00205E2020202000L, 0X00403E4040404000L, 0X00807E8080808000L,
    0X007E010101010100L, 0X007C020202020200L, 0X007A040404040400L, 0X0076080808080800L,
    0X006E101010101000L, 0X005E202020202000L, 0X003E404040404000L, 0X007E808080808000L,
    0X7E01010101010100L, 0X7C02020202020200L, 0X7A04040404040400L, 0X7608080808080800L,
    0X6E10101010101000L, 0X5E20202020202000L, 0X3E40404040404000L, 0X7E80808080808000L
  )

  val BishopMasks: Array[BitBoard] = Array(
    0X0040201008040200L, 0X0000402010080400L, 0X0000004020100A00L, 0X0000000040221400L,
    0X0000000002442800L, 0X0000000204085000L, 0X0000020408102000L, 0X0002040810204000L,
    0X0020100804020000L, 0X0040201008040000L, 0X00004020100A0000L, 0X0000004022140000L,
    0X0000000244280000L, 0X0000020408500000L, 0X0002040810200000L, 0X0004081020400000L,
    0X0010080402000200L, 0X0020100804000400L, 0X004020100A000A00L, 0X0000402214001400L,
    0X0000024428002800L, 0X0002040850005000L, 0X0004081020002000L, 0X0008102040004000L,
    0X0008040200020400L, 0X0010080400040800L, 0X0020100A000A1000L, 0X0040221400142200L,
    0X0002442800284400L, 0X0004085000500800L, 0X0008102000201000L, 0X0010204000402000L,
    0X0004020002040800L, 0X0008040004081000L, 0X00100A000A102000L, 0X0022140014224000L,
    0X0044280028440200L, 0X0008500050080400L, 0X0010200020100800L, 0X0020400040201000L,
    0X0002000204081000L, 0X0004000408102000L, 0X000A000A10204000L, 0X0014001422400000L,
    0X0028002844020000L, 0X0050005008040200L, 0X0020002010080400L, 0X0040004020100800L,
    0X0000020408102000L, 0X0000040810204000L, 0X00000A1020400000L, 0X0000142240000000L,
    0X0000284402000000L, 0X0000500804020000L, 0X0000201008040200L, 0X0000402010080400L,
    0X0002040810204000L, 0X0004081020400000L, 0X000A102040000000L, 0X0014224000000000L,
    0X0028440200000000L, 0X0050080402000000L, 0X0020100804020000L, 0X0040201008040200L
  )

  val RookMagic: Array[BitBoard] = Array(
    0X0A8002C000108020L, 0X06C00049B0002001L, 0X0100200010090040L, 0X2480041000800801L,
    0X0280028004000800L, 0X0900410008040022L, 0X0280020001001080L, 0X2880002041000080L,
    0XA000800080400034L, 0X0004808020004000L, 0X2290802004801000L, 0X0411000D00100020L,
    0X0402800800040080L, 0X000B000401004208L, 0X2409000100040200L, 0X0001002100004082L,
    0X0022878001E24000L, 0X1090810021004010L, 0X0801030040200012L, 0X0500808008001000L,
    0X0A08018014000880L, 0X8000808004000200L, 0X0201008080010200L, 0X0801020000441091L,
    0X0000800080204005L, 0X1040200040100048L, 0X0000120200402082L, 0X0D14880480100080L,
    0X0012040280080080L, 0X0100040080020080L, 0X9020010080800200L, 0X0813241200148449L,
    0X0491604001800080L, 0X0100401000402001L, 0X4820010021001040L, 0X0400402202000812L,
    0X0209009005000802L, 0X0810800601800400L, 0X4301083214000150L, 0X204026458E001401L,
    0X0040204000808000L, 0X8001008040010020L, 0X8410820820420010L, 0X1003001000090020L,
    0X0804040008008080L, 0X0012000810020004L, 0X1000100200040208L, 0X430000A044020001L,
    0X0280009023410300L, 0X00E0100040002240L, 0X0000200100401700L, 0X2244100408008080L,
    0X0008000400801980L, 0X0002000810040200L, 0X8010100228810400L, 0X2000009044210200L,
    0X4080008040102101L, 0X0040002080411D01L, 0X2005524060000901L, 0X0502001008400422L,
    0X489A000810200402L, 0X0001004400080A13L, 0X4000011008020084L, 0X0026002114058042L
  )

  val BishopMagic: Array[BitBoard] = Array(
    0X89A1121896040240L, 0X2004844802002010L, 0X2068080051921000L, 0X62880A0220200808L,
    0X0004042004000000L, 0X0100822020200011L, 0XC00444222012000AL, 0X0028808801216001L,
    0X0400492088408100L, 0X0201C401040C0084L, 0X00840800910A0010L, 0X0000082080240060L,
    0X2000840504006000L, 0X30010C4108405004L, 0X1008005410080802L, 0X8144042209100900L,
    0X0208081020014400L, 0X004800201208CA00L, 0X0F18140408012008L, 0X1004002802102001L,
    0X0841000820080811L, 0X0040200200A42008L, 0X0000800054042000L, 0X88010400410C9000L,
    0X0520040470104290L, 0X1004040051500081L, 0X2002081833080021L, 0X000400C00C010142L,
    0X941408200C002000L, 0X0658810000806011L, 0X0188071040440A00L, 0X4800404002011C00L,
    0X0104442040404200L, 0X0511080202091021L, 0X0004022401120400L, 0X80C0040400080120L,
    0X8040010040820802L, 0X0480810700020090L, 0X0102008E00040242L, 0X0809005202050100L,
    0X8002024220104080L, 0X0431008804142000L, 0X0019001802081400L, 0X0200014208040080L,
    0X3308082008200100L, 0X041010500040C020L, 0X4012020C04210308L, 0X208220A202004080L,
    0X0111040120082000L, 0X6803040141280A00L, 0X2101004202410000L, 0X8200000041108022L,
    0X0000021082088000L, 0X0002410204010040L, 0X0040100400809000L, 0X0822088220820214L,
    0X0040808090012004L, 0X00910224040218C9L, 0X0402814422015008L, 0X0090014004842410L,
    0X0001000042304105L, 0X0010008830412A00L, 0X2520081090008908L, 0X40102000A0A60140L
  )

  val RookBits = Array(12, 11, 11, 11, 11, 11, 11, 12, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 11, 12, 11, 11, 11, 11, 11, 11, 12)

  val BishopBits = Array(6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 5, 5, 5,
    5, 7, 9, 9, 7, 5, 5, 5, 5, 7, 9, 9, 7, 5, 5, 5, 5, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 6)

  val RookAttackTable: Array[Array[BitBoard]]   = Array.ofDim(64, 4096)
  val BishopAttackTable: Array[Array[BitBoard]] = Array.ofDim(64, 512)

  val ZobristTable: Array[Array[Hash]] = Array.ofDim(64, 13)

  {
    // Initialisation block for rook/bishop attacks
    val rookStream   = getClass.getResourceAsStream("/RookAttackTable.dat")
    val bishopStream = getClass.getResourceAsStream("/BishopAttackTable.dat")
    (0 to 63).foreach { square =>
      val rookBytes: Array[Byte]   = Array.ofDim(4096 * 8)
      val bishopBytes: Array[Byte] = Array.ofDim(512 * 8)
      rookStream.read(rookBytes, 0, rookBytes.length)
      bishopStream.read(bishopBytes, 0, bishopBytes.length)
      ByteBuffer
        .allocate(rookBytes.length)
        .put(rookBytes)
        .flip()
        .asInstanceOf[ByteBuffer]
        .order(ByteOrder.LITTLE_ENDIAN)
        .asLongBuffer()
        .get(RookAttackTable(square))
      ByteBuffer
        .allocate(bishopBytes.length)
        .put(bishopBytes)
        .flip()
        .asInstanceOf[ByteBuffer]
        .order(ByteOrder.LITTLE_ENDIAN)
        .asLongBuffer()
        .get(BishopAttackTable(square))
    }
    // Initialisation block for Zobrist tables
    val random = new SecureRandom
    AllSquares.foreach { square =>
      val buff: Array[Byte] = Array.ofDim(13 * 8)
      random.nextBytes(buff)
      ByteBuffer
        .allocate(buff.length)
        .put(buff)
        .flip()
        .asInstanceOf[ByteBuffer]
        .order(ByteOrder.LITTLE_ENDIAN)
        .asLongBuffer()
        .get(ZobristTable(square))
      ZobristTable(square).indices.foreach(idx => ZobristTable(square)(idx) = Math.abs(ZobristTable(square)(idx)))
    }
  }
}
